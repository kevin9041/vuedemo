



###############打包的方式#####################
1.如果没有配置webpack.config.js   webpack src/main.js  dist/bundle.js
2.配置了webpack.config.js(指定了打包入口文件和输出文件)  webpack





#################热部署#######################
1.安装cnpm i webpack-dev-server -D,cnpm i html-webpack-plugin -D

2.在package.json中配置：
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev2": "webpack-dev-server --open --port 3000 --contentBase src --hot",
    "dev": "webpack-dev-server"
  },

  在webpack.config.js中配置：
  const webpack = require('webpack')

  plugins: [ // 配置插件的节点
          new webpack.HotModuleReplacementPlugin() // new 一个热更新的 模块对象， 这是 启用热更新的第 3 步
      ],

3.运行：cnpm run dev,会在托管目录下生成一个在内存中的bundle.js





#################内存中生成指定页面#######################

1.在package.json中配置：
    const htmlWebpackPlugin = require('html-webpack-plugin')

    plugins: [ // 配置插件的节点
            new htmlWebpackPlugin({ // 创建一个 在内存中 生成 HTML  页面的插件
                template: path.join(__dirname, './src/index.html'), // 指定 模板页面，将来会根据指定的页面路径，去生成内存中的 页面
                filename: 'index.html' // 指定生成的页面的名称
            })
        ]
2.运行：cnpm run dev

3.在index.html中自动引用内存中的bundle.js,即<script type="text/javascript" src="bundle.js"></script>








